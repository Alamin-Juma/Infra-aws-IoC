name: iTrack CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  BACKEND_REPOSITORY: itrack-backend
  FRONTEND_REPOSITORY: itrack-frontend

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json

    - name: Install Backend Dependencies
      run: |
        cd backend
        npm ci

    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm ci

    - name: Run Backend Tests
      run: |
        cd backend
        npm test

    - name: Run Frontend Tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

    - name: Run ESLint on Backend
      run: |
        cd backend
        npx eslint . --ext .js --max-warnings 0

    - name: Run ESLint on Frontend
      run: |
        cd frontend
        npx eslint src --ext .js,.jsx --max-warnings 0

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Audit Backend Dependencies
      run: |
        cd backend
        npm audit --audit-level high

    - name: Audit Frontend Dependencies
      run: |
        cd frontend
        npm audit --audit-level high

  terraform-validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Format Check
      run: |
        cd terraform
        terraform fmt -check -recursive

    - name: Terraform Init
      run: |
        cd terraform
        terraform init -backend=false

    - name: Terraform Validate
      run: |
        cd terraform
        terraform validate

    - name: Run TFLint
      uses: terraform-linters/setup-tflint@v3
      with:
        tflint_version: latest

    - name: Initialize TFLint
      run: tflint --init

    - name: Run TFLint
      run: |
        cd terraform
        tflint --recursive

  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [test, security-scan, terraform-validate]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Backend image
      run: |
        cd backend
        docker build -t $ECR_REGISTRY/$BACKEND_REPOSITORY:$GITHUB_SHA .
        docker push $ECR_REGISTRY/$BACKEND_REPOSITORY:$GITHUB_SHA
        docker tag $ECR_REGISTRY/$BACKEND_REPOSITORY:$GITHUB_SHA $ECR_REGISTRY/$BACKEND_REPOSITORY:latest
        docker push $ECR_REGISTRY/$BACKEND_REPOSITORY:latest

    - name: Build and push Frontend image
      run: |
        cd frontend
        docker build -t $ECR_REGISTRY/$FRONTEND_REPOSITORY:$GITHUB_SHA .
        docker push $ECR_REGISTRY/$FRONTEND_REPOSITORY:$GITHUB_SHA
        docker tag $ECR_REGISTRY/$FRONTEND_REPOSITORY:$GITHUB_SHA $ECR_REGISTRY/$FRONTEND_REPOSITORY:latest
        docker push $ECR_REGISTRY/$FRONTEND_REPOSITORY:latest

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Create Terraform Plan for Staging
      run: |
        cd terraform
        terraform plan -var-file=environments/staging.tfvars -out=staging.tfplan

    - name: Apply Terraform Plan for Staging
      run: |
        cd terraform
        terraform apply -auto-approve staging.tfplan

    - name: Update ECS Services with New Images
      run: |
        # Update backend service
        aws ecs update-service \
          --cluster itrack-ecs-cluster-staging \
          --service itrack-backend-service-staging \
          --force-new-deployment

        # Update frontend service  
        aws ecs update-service \
          --cluster itrack-ecs-cluster-staging \
          --service itrack-frontend-service-staging \
          --force-new-deployment

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Create Terraform Plan for Production
      run: |
        cd terraform
        terraform plan -var-file=environments/production.tfvars -out=production.tfplan

    - name: Apply Terraform Plan for Production
      run: |
        cd terraform
        terraform apply -auto-approve production.tfplan

    - name: Blue-Green Deployment
      run: |
        # Create new task definitions with new image tags
        BACKEND_TASK_DEF=$(aws ecs describe-task-definition --task-definition itrack-backend-production --query 'taskDefinition')
        FRONTEND_TASK_DEF=$(aws ecs describe-task-definition --task-definition itrack-frontend-production --query 'taskDefinition')
        
        # Update image URIs in task definitions
        echo $BACKEND_TASK_DEF | jq --arg IMAGE "$ECR_REGISTRY/$BACKEND_REPOSITORY:$GITHUB_SHA" '.containerDefinitions[0].image = $IMAGE' > backend-task-def.json
        echo $FRONTEND_TASK_DEF | jq --arg IMAGE "$ECR_REGISTRY/$FRONTEND_REPOSITORY:$GITHUB_SHA" '.containerDefinitions[0].image = $IMAGE' > frontend-task-def.json
        
        # Register new task definitions
        aws ecs register-task-definition --cli-input-json file://backend-task-def.json
        aws ecs register-task-definition --cli-input-json file://frontend-task-def.json
        
        # Update services with rolling deployment
        aws ecs update-service \
          --cluster itrack-ecs-cluster-production \
          --service itrack-backend-service-production \
          --force-new-deployment
        
        aws ecs update-service \
          --cluster itrack-ecs-cluster-production \
          --service itrack-frontend-service-production \
          --force-new-deployment

    - name: Wait for deployment to complete
      run: |
        aws ecs wait services-stable \
          --cluster itrack-ecs-cluster-production \
          --services itrack-backend-service-production itrack-frontend-service-production

    - name: Health Check
      run: |
        # Wait for services to be healthy
        sleep 60
        
        # Health check endpoints
        BACKEND_URL=$(aws elbv2 describe-load-balancers --names itrack-alb-production --query 'LoadBalancers[0].DNSName' --output text)
        
        # Check backend health
        curl -f http://$BACKEND_URL/health || exit 1
        
        echo "Production deployment successful!"

  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Notify on Success
      if: needs.deploy-production.result == 'success'
      run: |
        echo "üéâ Production deployment successful!"
        # Add Slack/Teams notification here

    - name: Notify on Failure
      if: failure()
      run: |
        echo "‚ùå Pipeline failed!"
        # Add Slack/Teams notification here