name: ProdReady_Infra CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: 875486186130
  ECR_REGISTRY: 875486186130.dkr.ecr.us-east-1.amazonaws.com
  BACKEND_REPOSITORY: prodready-infra-api
  FRONTEND_REPOSITORY: prodready-infra-ui
  ECS_CLUSTER: prodready-infra-cluster-staging
  ECS_BACKEND_SERVICE: prodready-infra-backend-service-staging
  ECS_FRONTEND_SERVICE: prodready-infra-frontend-service-staging

jobs:
  # Terraform plan for PRs
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Format Check
        run: |
          cd terraform
          terraform fmt -check -recursive

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -backend-config="environments/staging.backend.conf"

      - name: Clear any stale locks
        run: |
          cd terraform
          echo "üîì Checking for stale Terraform locks..."
          terraform force-unlock -force ef4b274e-0c2c-cbf5-2ec5-f8e81ffd4e34 2>/dev/null || echo "No lock found or already cleared"
        continue-on-error: true

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -var-file="environments/staging.tfvars"
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

  # Build and push images (only on main branch)
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -backend-config="environments/staging.backend.conf"

      # Import existing ECR repositories if needed
      - name: Import existing ECR repositories
        run: |
          cd terraform
          echo "üîç Checking and importing existing ECR repositories..."
          
          # Try to import backend repository
          terraform import 'module.ecr.aws_ecr_repository.repos["prodready-infra-api"]' prodready-infra-api 2>/dev/null || echo "Backend repo already in state or doesn't exist"
          
          # Try to import frontend repository
          terraform import 'module.ecr.aws_ecr_repository.repos["prodready-infra-ui"]' prodready-infra-ui 2>/dev/null || echo "Frontend repo already in state or doesn't exist"
        continue-on-error: true
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

      # Build and push backend image
      - name: Build and push Backend image
        run: |
          cd api
          echo "Building backend image..."
          docker build -t $ECR_REGISTRY/$BACKEND_REPOSITORY:$GITHUB_SHA .
          docker build -t $ECR_REGISTRY/$BACKEND_REPOSITORY:latest .
          
          echo "Pushing backend image..."
          docker push $ECR_REGISTRY/$BACKEND_REPOSITORY:$GITHUB_SHA
          docker push $ECR_REGISTRY/$BACKEND_REPOSITORY:latest

      # Build and push frontend image
      - name: Build and push Frontend image
        run: |
          cd ui
          echo "Building frontend image..."
          docker build -t $ECR_REGISTRY/$FRONTEND_REPOSITORY:$GITHUB_SHA .
          docker build -t $ECR_REGISTRY/$FRONTEND_REPOSITORY:latest .
          
          echo "Pushing frontend image..."
          docker push $ECR_REGISTRY/$FRONTEND_REPOSITORY:$GITHUB_SHA
          docker push $ECR_REGISTRY/$FRONTEND_REPOSITORY:latest

      # Clear any stale locks before deployment
      - name: Clear stale Terraform locks
        run: |
          cd terraform
          echo "üîì Clearing any stale Terraform locks..."
          terraform force-unlock -force ef4b274e-0c2c-cbf5-2ec5-f8e81ffd4e34 2>/dev/null || echo "No lock found or already cleared"
        continue-on-error: true

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -var-file="environments/staging.tfvars" -out=staging.tfplan
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve staging.tfplan
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

      # Update ECS services
      - name: Update ECS Services
        run: |
          echo "Updating ECS services..."
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_BACKEND_SERVICE \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}
          
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_FRONTEND_SERVICE \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      # Wait for deployment
      - name: Wait for Deployment
        run: |
          echo "Waiting for backend service to stabilize..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_BACKEND_SERVICE \
            --region ${{ env.AWS_REGION }} \
            --max-attempts 30

          echo "Waiting for frontend service to stabilize..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_FRONTEND_SERVICE \
            --region ${{ env.AWS_REGION }} \
            --max-attempts 30

      # Health check
      - name: Health Check
        run: |
          echo "Running health checks..."
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names prodready-infra-alb-staging \
            --query 'LoadBalancers[0].DNSName' \
            --output text \
            --region ${{ env.AWS_REGION }})
          
          echo "Checking backend health at http://$ALB_DNS/api/health"
          for i in {1..10}; do
            if curl -f -s "http://$ALB_DNS/api/health" > /dev/null; then
              echo "‚úÖ Backend health check passed"
              break
            elif [ $i -eq 10 ]; then
              echo "‚ùå Backend health check failed after 10 attempts"
              exit 1
            else
              echo "‚è≥ Backend not ready, attempt $i/10..."
              sleep 30
            fi
          done

  # Notification
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always()
    
    steps:
      - name: Notify Success
        if: needs.build-and-deploy.result == 'success'
        run: echo "üéâ Deployment successful!"

      - name: Notify Failure
        if: needs.build-and-deploy.result == 'failure'
        run: echo "‚ùå Deployment failed!"