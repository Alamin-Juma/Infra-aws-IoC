name: ProdReady_Infra CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: 875486186130
  ECR_REGISTRY: 875486186130.dkr.ecr.us-east-1.amazonaws.com
  BACKEND_REPOSITORY: prodready-infra-api
  FRONTEND_REPOSITORY: prodready-infra-ui
  ECS_CLUSTER: prodready-infra-cluster-staging
  ECS_BACKEND_SERVICE: prodready-infra-backend-service-staging
  ECS_FRONTEND_SERVICE: prodready-infra-frontend-service-staging

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Format Check
        run: |
          cd terraform
          terraform fmt -check -recursive

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -backend-config="environments/staging.backend.conf"

      - name: Force unlock Terraform state
        run: |
          cd terraform
          echo "üîì Force unlocking Terraform state..."
          terraform force-unlock -force ef4b274e-0c2c-cbf5-2ec5-f8e81ffd4e34 2>/dev/null || echo "No lock with this ID or already cleared"
        continue-on-error: true

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -var-file="environments/staging.tfvars"
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -backend-config="environments/staging.backend.conf"

      - name: Clear stale Terraform locks
        run: |
          cd terraform
          echo "üîì Clearing any stale Terraform locks..."
          if terraform plan -var-file="environments/staging.tfvars" 2>&1 | grep -q "Lock Info:"; then
            LOCK_ID=$(terraform plan -var-file="environments/staging.tfvars" 2>&1 | grep "ID:" | awk '{print $2}' | head -1)
            echo "Detected lock ID: $LOCK_ID"
            terraform force-unlock -force "$LOCK_ID" 2>/dev/null || echo "Could not unlock or already cleared"
          else
            echo "No locks detected"
          fi
        continue-on-error: true
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

      - name: Build and push Backend image
        run: |
          cd api
          echo "üèóÔ∏è Building backend image..."
          docker build -t $ECR_REGISTRY/$BACKEND_REPOSITORY:$GITHUB_SHA .
          docker build -t $ECR_REGISTRY/$BACKEND_REPOSITORY:latest .
          
          echo "üì§ Pushing backend image..."
          docker push $ECR_REGISTRY/$BACKEND_REPOSITORY:$GITHUB_SHA
          docker push $ECR_REGISTRY/$BACKEND_REPOSITORY:latest
          echo "‚úÖ Backend image pushed"

      - name: Build and push Frontend image
        run: |
          cd ui
          echo "üèóÔ∏è Building frontend image..."
          docker build -t $ECR_REGISTRY/$FRONTEND_REPOSITORY:$GITHUB_SHA .
          docker build -t $ECR_REGISTRY/$FRONTEND_REPOSITORY:latest .
          
          echo "üì§ Pushing frontend image..."
          docker push $ECR_REGISTRY/$FRONTEND_REPOSITORY:$GITHUB_SHA
          docker push $ECR_REGISTRY/$FRONTEND_REPOSITORY:latest
          echo "‚úÖ Frontend image pushed"

      - name: Terraform Apply
        id: apply
        run: |
          cd terraform
          echo "üöÄ Applying Terraform changes..."
          
          terraform force-unlock -force fb45a5bc-a2cf-323f-e57b-0432c53495cf 2>/dev/null || echo "No lock to clear"
          terraform refresh -var-file="environments/staging.tfvars" >/dev/null 2>&1 || true
          
          echo "Applying changes..."
          terraform apply -auto-approve -var-file="environments/staging.tfvars" 2>&1 | tee /tmp/apply_output.log
          APPLY_EXIT=${PIPESTATUS[0]}
          
          if [ $APPLY_EXIT -ne 0 ]; then
            if grep -q "RepositoryAlreadyExistsException" /tmp/apply_output.log; then
              echo "‚ùå ECR repository already exists error detected!"
              echo "üîÑ Attempting to import and re-apply..."
              
              for REPO in "$BACKEND_REPOSITORY" "$FRONTEND_REPOSITORY"; do
                RESOURCE_PATH="module.ecr.aws_ecr_repository.repos[\"$REPO\"]"
                if aws ecr describe-repositories --repository-names "$REPO" --region $AWS_REGION >/dev/null 2>&1; then
                  if ! terraform state list 2>/dev/null | grep -qF "$RESOURCE_PATH"; then
                    echo "üì• Importing $REPO to Terraform state..."
                    terraform import "$RESOURCE_PATH" "$REPO" || echo "Import failed for $REPO"
                  fi
                fi
              done
              
              terraform refresh -var-file="environments/staging.tfvars" >/dev/null 2>&1 || true
              echo "üîÑ Retrying apply..."
              terraform apply -auto-approve -var-file="environments/staging.tfvars" 2>&1 | tee /tmp/retry_apply_output.log
              RETRY_EXIT=${PIPESTATUS[0]}
              
              if [ $RETRY_EXIT -ne 0 ]; then
                echo "‚ùå Retry failed!"
                cat /tmp/retry_apply_output.log
                exit 1
              fi
            else
              cat /tmp/apply_output.log
              exit $APPLY_EXIT
            fi
          fi
          
          echo "‚úÖ Infrastructure deployment complete"
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

      - name: Update ECS Services
        run: |
          echo "üîÑ Updating ECS services..."
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_BACKEND_SERVICE \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}
          
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_FRONTEND_SERVICE \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}
          echo "‚úÖ ECS updates initiated"

      - name: Wait for Deployment
        run: |
          echo "‚è≥ Waiting for services to stabilize..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_BACKEND_SERVICE \
            --region ${{ env.AWS_REGION }} \
            --max-attempts 30 && echo "‚úÖ Backend stable"

          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_FRONTEND_SERVICE \
            --region ${{ env.AWS_REGION }} \
            --max-attempts 30 && echo "‚úÖ Frontend stable"

      - name: Health Check
        run: |
          echo "üè• Running health checks..."
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names prodready-infra-alb-staging \
            --query 'LoadBalancers[0].DNSName' \
            --output text \
            --region ${{ env.AWS_REGION }})
          
          echo "Load Balancer: $ALB_DNS"
          for i in {1..10}; do
            echo "Health check $i/10..."
            if curl -f -s "http://$ALB_DNS/api/health" > /dev/null; then
              echo "‚úÖ Health check passed!"
              break
            elif [ $i -eq 10 ]; then
              echo "‚ùå Health check failed"
              exit 1
            else
              echo "‚è≥ Waiting 30s..."
              sleep 30
            fi
          done

      - name: Deployment Summary
        if: always()
        run: |
          echo "üìä Deployment Summary"
          echo "===================="
          echo "Region: $AWS_REGION"
          echo "Commit: $GITHUB_SHA"
          echo ""
          if [ "${{ steps.apply.outcome }}" == "success" ]; then
            echo "Status: ‚úÖ Successful"
          else
            echo "Status: ‚ùå Failed"
          fi

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: ${{ always() }}
    
    steps:
      - name: Notify Success
        if: ${{ needs.build-and-deploy.result == 'success' }}
        run: echo "üéâ Deployment Successful!"

      - name: Notify Failure
        if: ${{ needs.build-and-deploy.result == 'failure' }}
        run: |
          echo "‚ùå Deployment Failed!"
          exit 1
